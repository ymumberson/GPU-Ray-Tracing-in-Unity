// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
float2 _PixelOffset;
float4 _DirectionalLight;

float2 _Pixel;
float _Seed;

float rand() {
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

float3x3 GetTangentSpace(float3 normal) {
    float3 helper = float3(1,0,0);
    if (abs(normal.x) > 0.99f) {
        helper = float3(0,0,1);
    }

    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, helper));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha) {
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

//float3 SampleHemisphere(float3 normal) {
//    float cosTheta = rand();
//    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
//    float phi = 2 * PI * rand();
//    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
//    return mul(tangentSpaceDir, GetTangentSpace(normal));
//}

float sdot(float3 x, float3 y, float f = 1.0f) {
    return saturate(dot(x,y) * f);
}

float energy(float3 color) {
    return dot(color, 1.0f / 3.0f);
}

float SmoothnessToAlpha(float s) {
    return pow(1000.0f, s * s);
}

struct Ray {
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f,1.0f,1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0.0f,0.0f,0.0f,1.0f)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f,0.0f,0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f,0.0f,0.0f);
    hit.albedo = float3(0.0f,0.0f,0.0f);
    hit.specular = float3(0.0f,0.0f,0.0f);
    hit.smoothness = 0.0f;
    hit.emission = float3(0.0f,0.0f,0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = float3(0.8f,0.8f,0.8f);
        bestHit.specular = float3(0.04f,0.04f,0.04f);
    }
}

struct Sphere {
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction,d);
    float p2sqr = p1 * p1 - dot(d,d) + sphere.radius * sphere.radius;
    if (p2sqr < 0) {
        return;
    }

    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.smoothness = sphere.smoothness;
        bestHit.emission = sphere.emission;
    }
}

StructuredBuffer<Sphere> _Spheres;

RayHit Trace(Ray ray) {
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    uint numSpheres, strides;
    _Spheres.GetDimensions(numSpheres, strides);
    for (uint i=0; i<numSpheres; ++i) {
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {
    if (hit.distance < 1.#INF) {
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;

        float roulette = rand();
        if (roulette < specChance) {
            float alpha = SmoothnessToAlpha(hit.smoothness);
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        } else {
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        return hit.emission;
    } else {
        ray.energy = 0; // energy = 0 as the sky doesn't reflect anything

        // No hit so return skybox
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _Pixel = id.xy;
    uint width, height;
    Result.GetDimensions(width,height);

    float2 uv = float2((id.xy + _PixelOffset) / float2(width,height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    float3 result = float3(0,0,0);
    for (int i=0; i<8; ++i) { //Allows 8 bounces
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy)) break;
    }
    Result[id.xy] = float4(result,1);
}
